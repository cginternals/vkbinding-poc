
#include "Binding_pch.h"


using namespace vk;


namespace vkbinding
{


Function<void, VkCommandBuffer, const VkConditionalRenderingBeginInfoEXT*> Binding::CmdBeginConditionalRenderingEXT("vkCmdBeginConditionalRenderingEXT");
Function<void, VkCommandBuffer, const VkDebugUtilsLabelEXT*> Binding::CmdBeginDebugUtilsLabelEXT("vkCmdBeginDebugUtilsLabelEXT");
Function<void, VkCommandBuffer, VkQueryPool, uint32_t, VkQueryControlFlags> Binding::CmdBeginQuery("vkCmdBeginQuery");
Function<void, VkCommandBuffer, VkQueryPool, uint32_t, VkQueryControlFlags, uint32_t> Binding::CmdBeginQueryIndexedEXT("vkCmdBeginQueryIndexedEXT");
Function<void, VkCommandBuffer, const VkRenderPassBeginInfo*, VkSubpassContents> Binding::CmdBeginRenderPass("vkCmdBeginRenderPass");
Function<void, VkCommandBuffer, const VkRenderPassBeginInfo*, const VkSubpassBeginInfoKHR*> Binding::CmdBeginRenderPass2KHR("vkCmdBeginRenderPass2KHR");
Function<void, VkCommandBuffer, uint32_t, uint32_t, const VkBuffer*, const VkDeviceSize*> Binding::CmdBeginTransformFeedbackEXT("vkCmdBeginTransformFeedbackEXT");
Function<void, VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint32_t, uint32_t, const VkDescriptorSet*, uint32_t, const uint32_t*> Binding::CmdBindDescriptorSets("vkCmdBindDescriptorSets");
Function<void, VkCommandBuffer, VkBuffer, VkDeviceSize, VkIndexType> Binding::CmdBindIndexBuffer("vkCmdBindIndexBuffer");
Function<void, VkCommandBuffer, VkPipelineBindPoint, VkPipeline> Binding::CmdBindPipeline("vkCmdBindPipeline");
Function<void, VkCommandBuffer, VkImageView, VkImageLayout> Binding::CmdBindShadingRateImageNV("vkCmdBindShadingRateImageNV");
Function<void, VkCommandBuffer, uint32_t, uint32_t, const VkBuffer*, const VkDeviceSize*, const VkDeviceSize*> Binding::CmdBindTransformFeedbackBuffersEXT("vkCmdBindTransformFeedbackBuffersEXT");
Function<void, VkCommandBuffer, uint32_t, uint32_t, const VkBuffer*, const VkDeviceSize*> Binding::CmdBindVertexBuffers("vkCmdBindVertexBuffers");
Function<void, VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint32_t, const VkImageBlit*, VkFilter> Binding::CmdBlitImage("vkCmdBlitImage");
Function<void, VkCommandBuffer, const VkAccelerationStructureInfoNV*, VkBuffer, VkDeviceSize, VkBool32, VkAccelerationStructureNV, VkAccelerationStructureNV, VkBuffer, VkDeviceSize> Binding::CmdBuildAccelerationStructureNV("vkCmdBuildAccelerationStructureNV");
Function<void, VkCommandBuffer, uint32_t, const VkClearAttachment*, uint32_t, const VkClearRect*> Binding::CmdClearAttachments("vkCmdClearAttachments");
Function<void, VkCommandBuffer, VkImage, VkImageLayout, const VkClearColorValue*, uint32_t, const VkImageSubresourceRange*> Binding::CmdClearColorImage("vkCmdClearColorImage");
Function<void, VkCommandBuffer, VkImage, VkImageLayout, const VkClearDepthStencilValue*, uint32_t, const VkImageSubresourceRange*> Binding::CmdClearDepthStencilImage("vkCmdClearDepthStencilImage");
Function<void, VkCommandBuffer, VkAccelerationStructureNV, VkAccelerationStructureNV, VkCopyAccelerationStructureModeNV> Binding::CmdCopyAccelerationStructureNV("vkCmdCopyAccelerationStructureNV");
Function<void, VkCommandBuffer, VkBuffer, VkBuffer, uint32_t, const VkBufferCopy*> Binding::CmdCopyBuffer("vkCmdCopyBuffer");
Function<void, VkCommandBuffer, VkBuffer, VkImage, VkImageLayout, uint32_t, const VkBufferImageCopy*> Binding::CmdCopyBufferToImage("vkCmdCopyBufferToImage");
Function<void, VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint32_t, const VkImageCopy*> Binding::CmdCopyImage("vkCmdCopyImage");
Function<void, VkCommandBuffer, VkImage, VkImageLayout, VkBuffer, uint32_t, const VkBufferImageCopy*> Binding::CmdCopyImageToBuffer("vkCmdCopyImageToBuffer");
Function<void, VkCommandBuffer, VkQueryPool, uint32_t, uint32_t, VkBuffer, VkDeviceSize, VkDeviceSize, VkQueryResultFlags> Binding::CmdCopyQueryPoolResults("vkCmdCopyQueryPoolResults");
Function<void, VkCommandBuffer, const VkDebugMarkerMarkerInfoEXT*> Binding::CmdDebugMarkerBeginEXT("vkCmdDebugMarkerBeginEXT");
Function<void, VkCommandBuffer> Binding::CmdDebugMarkerEndEXT("vkCmdDebugMarkerEndEXT");
Function<void, VkCommandBuffer, const VkDebugMarkerMarkerInfoEXT*> Binding::CmdDebugMarkerInsertEXT("vkCmdDebugMarkerInsertEXT");
Function<void, VkCommandBuffer, uint32_t, uint32_t, uint32_t> Binding::CmdDispatch("vkCmdDispatch");
Function<void, VkCommandBuffer, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t> Binding::CmdDispatchBase("vkCmdDispatchBase");
Function<void, VkCommandBuffer, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t> Binding::CmdDispatchBaseKHR("vkCmdDispatchBaseKHR");
Function<void, VkCommandBuffer, VkBuffer, VkDeviceSize> Binding::CmdDispatchIndirect("vkCmdDispatchIndirect");
Function<void, VkCommandBuffer, uint32_t, uint32_t, uint32_t, uint32_t> Binding::CmdDraw("vkCmdDraw");
Function<void, VkCommandBuffer, uint32_t, uint32_t, uint32_t, int32_t, uint32_t> Binding::CmdDrawIndexed("vkCmdDrawIndexed");
Function<void, VkCommandBuffer, VkBuffer, VkDeviceSize, uint32_t, uint32_t> Binding::CmdDrawIndexedIndirect("vkCmdDrawIndexedIndirect");
Function<void, VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32_t, uint32_t> Binding::CmdDrawIndexedIndirectCountAMD("vkCmdDrawIndexedIndirectCountAMD");
Function<void, VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32_t, uint32_t> Binding::CmdDrawIndexedIndirectCountKHR("vkCmdDrawIndexedIndirectCountKHR");
Function<void, VkCommandBuffer, VkBuffer, VkDeviceSize, uint32_t, uint32_t> Binding::CmdDrawIndirect("vkCmdDrawIndirect");
Function<void, VkCommandBuffer, uint32_t, uint32_t, VkBuffer, VkDeviceSize, uint32_t, uint32_t> Binding::CmdDrawIndirectByteCountEXT("vkCmdDrawIndirectByteCountEXT");
Function<void, VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32_t, uint32_t> Binding::CmdDrawIndirectCountAMD("vkCmdDrawIndirectCountAMD");
Function<void, VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32_t, uint32_t> Binding::CmdDrawIndirectCountKHR("vkCmdDrawIndirectCountKHR");
Function<void, VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32_t, uint32_t> Binding::CmdDrawMeshTasksIndirectCountNV("vkCmdDrawMeshTasksIndirectCountNV");
Function<void, VkCommandBuffer, VkBuffer, VkDeviceSize, uint32_t, uint32_t> Binding::CmdDrawMeshTasksIndirectNV("vkCmdDrawMeshTasksIndirectNV");
Function<void, VkCommandBuffer, uint32_t, uint32_t> Binding::CmdDrawMeshTasksNV("vkCmdDrawMeshTasksNV");
Function<void, VkCommandBuffer> Binding::CmdEndConditionalRenderingEXT("vkCmdEndConditionalRenderingEXT");
Function<void, VkCommandBuffer> Binding::CmdEndDebugUtilsLabelEXT("vkCmdEndDebugUtilsLabelEXT");
Function<void, VkCommandBuffer, VkQueryPool, uint32_t> Binding::CmdEndQuery("vkCmdEndQuery");
Function<void, VkCommandBuffer, VkQueryPool, uint32_t, uint32_t> Binding::CmdEndQueryIndexedEXT("vkCmdEndQueryIndexedEXT");
Function<void, VkCommandBuffer> Binding::CmdEndRenderPass("vkCmdEndRenderPass");
Function<void, VkCommandBuffer, const VkSubpassEndInfoKHR*> Binding::CmdEndRenderPass2KHR("vkCmdEndRenderPass2KHR");
Function<void, VkCommandBuffer, uint32_t, uint32_t, const VkBuffer*, const VkDeviceSize*> Binding::CmdEndTransformFeedbackEXT("vkCmdEndTransformFeedbackEXT");
Function<void, VkCommandBuffer, uint32_t, const VkCommandBuffer*> Binding::CmdExecuteCommands("vkCmdExecuteCommands");
Function<void, VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, uint32_t> Binding::CmdFillBuffer("vkCmdFillBuffer");
Function<void, VkCommandBuffer, const VkDebugUtilsLabelEXT*> Binding::CmdInsertDebugUtilsLabelEXT("vkCmdInsertDebugUtilsLabelEXT");
Function<void, VkCommandBuffer, VkSubpassContents> Binding::CmdNextSubpass("vkCmdNextSubpass");
Function<void, VkCommandBuffer, const VkSubpassBeginInfoKHR*, const VkSubpassEndInfoKHR*> Binding::CmdNextSubpass2KHR("vkCmdNextSubpass2KHR");
Function<void, VkCommandBuffer, VkPipelineStageFlags, VkPipelineStageFlags, VkDependencyFlags, uint32_t, const VkMemoryBarrier*, uint32_t, const VkBufferMemoryBarrier*, uint32_t, const VkImageMemoryBarrier*> Binding::CmdPipelineBarrier("vkCmdPipelineBarrier");
Function<void, VkCommandBuffer, const VkCmdProcessCommandsInfoNVX*> Binding::CmdProcessCommandsNVX("vkCmdProcessCommandsNVX");
Function<void, VkCommandBuffer, VkPipelineLayout, VkShaderStageFlags, uint32_t, uint32_t, const void*> Binding::CmdPushConstants("vkCmdPushConstants");
Function<void, VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint32_t, uint32_t, const VkWriteDescriptorSet*> Binding::CmdPushDescriptorSetKHR("vkCmdPushDescriptorSetKHR");
Function<void, VkCommandBuffer, VkDescriptorUpdateTemplate, VkPipelineLayout, uint32_t, const void*> Binding::CmdPushDescriptorSetWithTemplateKHR("vkCmdPushDescriptorSetWithTemplateKHR");
Function<void, VkCommandBuffer, const VkCmdReserveSpaceForCommandsInfoNVX*> Binding::CmdReserveSpaceForCommandsNVX("vkCmdReserveSpaceForCommandsNVX");
Function<void, VkCommandBuffer, VkEvent, VkPipelineStageFlags> Binding::CmdResetEvent("vkCmdResetEvent");
Function<void, VkCommandBuffer, VkQueryPool, uint32_t, uint32_t> Binding::CmdResetQueryPool("vkCmdResetQueryPool");
Function<void, VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint32_t, const VkImageResolve*> Binding::CmdResolveImage("vkCmdResolveImage");
Function<void, VkCommandBuffer, const float> Binding::CmdSetBlendConstants("vkCmdSetBlendConstants");
Function<void, VkCommandBuffer, const void*> Binding::CmdSetCheckpointNV("vkCmdSetCheckpointNV");
Function<void, VkCommandBuffer, VkCoarseSampleOrderTypeNV, uint32_t, const VkCoarseSampleOrderCustomNV*> Binding::CmdSetCoarseSampleOrderNV("vkCmdSetCoarseSampleOrderNV");
Function<void, VkCommandBuffer, float, float, float> Binding::CmdSetDepthBias("vkCmdSetDepthBias");
Function<void, VkCommandBuffer, float, float> Binding::CmdSetDepthBounds("vkCmdSetDepthBounds");
Function<void, VkCommandBuffer, uint32_t> Binding::CmdSetDeviceMask("vkCmdSetDeviceMask");
Function<void, VkCommandBuffer, uint32_t> Binding::CmdSetDeviceMaskKHR("vkCmdSetDeviceMaskKHR");
Function<void, VkCommandBuffer, uint32_t, uint32_t, const VkRect2D*> Binding::CmdSetDiscardRectangleEXT("vkCmdSetDiscardRectangleEXT");
Function<void, VkCommandBuffer, VkEvent, VkPipelineStageFlags> Binding::CmdSetEvent("vkCmdSetEvent");
Function<void, VkCommandBuffer, uint32_t, uint32_t, const VkRect2D*> Binding::CmdSetExclusiveScissorNV("vkCmdSetExclusiveScissorNV");
Function<void, VkCommandBuffer, uint32_t, uint16_t> Binding::CmdSetLineStippleEXT("vkCmdSetLineStippleEXT");
Function<void, VkCommandBuffer, float> Binding::CmdSetLineWidth("vkCmdSetLineWidth");
Function<VkResult, VkCommandBuffer, const VkPerformanceMarkerInfoINTEL*> Binding::CmdSetPerformanceMarkerINTEL("vkCmdSetPerformanceMarkerINTEL");
Function<VkResult, VkCommandBuffer, const VkPerformanceOverrideInfoINTEL*> Binding::CmdSetPerformanceOverrideINTEL("vkCmdSetPerformanceOverrideINTEL");
Function<VkResult, VkCommandBuffer, const VkPerformanceStreamMarkerInfoINTEL*> Binding::CmdSetPerformanceStreamMarkerINTEL("vkCmdSetPerformanceStreamMarkerINTEL");
Function<void, VkCommandBuffer, const VkSampleLocationsInfoEXT*> Binding::CmdSetSampleLocationsEXT("vkCmdSetSampleLocationsEXT");
Function<void, VkCommandBuffer, uint32_t, uint32_t, const VkRect2D*> Binding::CmdSetScissor("vkCmdSetScissor");
Function<void, VkCommandBuffer, VkStencilFaceFlags, uint32_t> Binding::CmdSetStencilCompareMask("vkCmdSetStencilCompareMask");
Function<void, VkCommandBuffer, VkStencilFaceFlags, uint32_t> Binding::CmdSetStencilReference("vkCmdSetStencilReference");
Function<void, VkCommandBuffer, VkStencilFaceFlags, uint32_t> Binding::CmdSetStencilWriteMask("vkCmdSetStencilWriteMask");
Function<void, VkCommandBuffer, uint32_t, uint32_t, const VkViewport*> Binding::CmdSetViewport("vkCmdSetViewport");
Function<void, VkCommandBuffer, uint32_t, uint32_t, const VkShadingRatePaletteNV*> Binding::CmdSetViewportShadingRatePaletteNV("vkCmdSetViewportShadingRatePaletteNV");
Function<void, VkCommandBuffer, uint32_t, uint32_t, const VkViewportWScalingNV*> Binding::CmdSetViewportWScalingNV("vkCmdSetViewportWScalingNV");
Function<void, VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, uint32_t, uint32_t, uint32_t> Binding::CmdTraceRaysNV("vkCmdTraceRaysNV");
Function<void, VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, const void*> Binding::CmdUpdateBuffer("vkCmdUpdateBuffer");
Function<void, VkCommandBuffer, uint32_t, const VkEvent*, VkPipelineStageFlags, VkPipelineStageFlags, uint32_t, const VkMemoryBarrier*, uint32_t, const VkBufferMemoryBarrier*, uint32_t, const VkImageMemoryBarrier*> Binding::CmdWaitEvents("vkCmdWaitEvents");
Function<void, VkCommandBuffer, uint32_t, const VkAccelerationStructureNV*, VkQueryType, VkQueryPool, uint32_t> Binding::CmdWriteAccelerationStructuresPropertiesNV("vkCmdWriteAccelerationStructuresPropertiesNV");
Function<void, VkCommandBuffer, VkPipelineStageFlagBits, VkBuffer, VkDeviceSize, uint32_t> Binding::CmdWriteBufferMarkerAMD("vkCmdWriteBufferMarkerAMD");
Function<void, VkCommandBuffer, VkPipelineStageFlagBits, VkQueryPool, uint32_t> Binding::CmdWriteTimestamp("vkCmdWriteTimestamp");
Function<VkResult, VkDevice, VkPipeline, uint32_t> Binding::CompileDeferredNV("vkCompileDeferredNV");
Function<VkResult, VkDevice, const VkAccelerationStructureCreateInfoNV*, const VkAllocationCallbacks*, VkAccelerationStructureNV*> Binding::CreateAccelerationStructureNV("vkCreateAccelerationStructureNV");
Function<VkResult, VkDevice, const VkBufferCreateInfo*, const VkAllocationCallbacks*, VkBuffer*> Binding::CreateBuffer("vkCreateBuffer");
Function<VkResult, VkDevice, const VkBufferViewCreateInfo*, const VkAllocationCallbacks*, VkBufferView*> Binding::CreateBufferView("vkCreateBufferView");
Function<VkResult, VkDevice, const VkCommandPoolCreateInfo*, const VkAllocationCallbacks*, VkCommandPool*> Binding::CreateCommandPool("vkCreateCommandPool");
Function<VkResult, VkDevice, VkPipelineCache, uint32_t, const VkComputePipelineCreateInfo*, const VkAllocationCallbacks*, VkPipeline*> Binding::CreateComputePipelines("vkCreateComputePipelines");
Function<VkResult, VkInstance, const VkDebugReportCallbackCreateInfoEXT*, const VkAllocationCallbacks*, VkDebugReportCallbackEXT*> Binding::CreateDebugReportCallbackEXT("vkCreateDebugReportCallbackEXT");
Function<VkResult, VkInstance, const VkDebugUtilsMessengerCreateInfoEXT*, const VkAllocationCallbacks*, VkDebugUtilsMessengerEXT*> Binding::CreateDebugUtilsMessengerEXT("vkCreateDebugUtilsMessengerEXT");
Function<VkResult, VkDevice, const VkDescriptorPoolCreateInfo*, const VkAllocationCallbacks*, VkDescriptorPool*> Binding::CreateDescriptorPool("vkCreateDescriptorPool");
Function<VkResult, VkDevice, const VkDescriptorSetLayoutCreateInfo*, const VkAllocationCallbacks*, VkDescriptorSetLayout*> Binding::CreateDescriptorSetLayout("vkCreateDescriptorSetLayout");
Function<VkResult, VkDevice, const VkDescriptorUpdateTemplateCreateInfo*, const VkAllocationCallbacks*, VkDescriptorUpdateTemplate*> Binding::CreateDescriptorUpdateTemplate("vkCreateDescriptorUpdateTemplate");
Function<VkResult, VkDevice, const VkDescriptorUpdateTemplateCreateInfo*, const VkAllocationCallbacks*, VkDescriptorUpdateTemplate*> Binding::CreateDescriptorUpdateTemplateKHR("vkCreateDescriptorUpdateTemplateKHR");
Function<VkResult, VkPhysicalDevice, const VkDeviceCreateInfo*, const VkAllocationCallbacks*, VkDevice*> Binding::CreateDevice("vkCreateDevice");
Function<VkResult, VkPhysicalDevice, VkDisplayKHR, const VkDisplayModeCreateInfoKHR*, const VkAllocationCallbacks*, VkDisplayModeKHR*> Binding::CreateDisplayModeKHR("vkCreateDisplayModeKHR");
Function<VkResult, VkInstance, const VkDisplaySurfaceCreateInfoKHR*, const VkAllocationCallbacks*, VkSurfaceKHR*> Binding::CreateDisplayPlaneSurfaceKHR("vkCreateDisplayPlaneSurfaceKHR");
Function<VkResult, VkDevice, const VkEventCreateInfo*, const VkAllocationCallbacks*, VkEvent*> Binding::CreateEvent("vkCreateEvent");
Function<VkResult, VkDevice, const VkFenceCreateInfo*, const VkAllocationCallbacks*, VkFence*> Binding::CreateFence("vkCreateFence");
Function<VkResult, VkDevice, const VkFramebufferCreateInfo*, const VkAllocationCallbacks*, VkFramebuffer*> Binding::CreateFramebuffer("vkCreateFramebuffer");
Function<VkResult, VkDevice, VkPipelineCache, uint32_t, const VkGraphicsPipelineCreateInfo*, const VkAllocationCallbacks*, VkPipeline*> Binding::CreateGraphicsPipelines("vkCreateGraphicsPipelines");
Function<VkResult, VkInstance, const VkHeadlessSurfaceCreateInfoEXT*, const VkAllocationCallbacks*, VkSurfaceKHR*> Binding::CreateHeadlessSurfaceEXT("vkCreateHeadlessSurfaceEXT");
Function<VkResult, VkDevice, const VkImageCreateInfo*, const VkAllocationCallbacks*, VkImage*> Binding::CreateImage("vkCreateImage");
Function<VkResult, VkDevice, const VkImageViewCreateInfo*, const VkAllocationCallbacks*, VkImageView*> Binding::CreateImageView("vkCreateImageView");
Function<VkResult, VkDevice, const VkIndirectCommandsLayoutCreateInfoNVX*, const VkAllocationCallbacks*, VkIndirectCommandsLayoutNVX*> Binding::CreateIndirectCommandsLayoutNVX("vkCreateIndirectCommandsLayoutNVX");
Function<VkResult, const VkInstanceCreateInfo*, const VkAllocationCallbacks*, VkInstance*> Binding::CreateInstance("vkCreateInstance");
Function<VkResult, VkDevice, const VkObjectTableCreateInfoNVX*, const VkAllocationCallbacks*, VkObjectTableNVX*> Binding::CreateObjectTableNVX("vkCreateObjectTableNVX");
Function<VkResult, VkDevice, const VkPipelineCacheCreateInfo*, const VkAllocationCallbacks*, VkPipelineCache*> Binding::CreatePipelineCache("vkCreatePipelineCache");
Function<VkResult, VkDevice, const VkPipelineLayoutCreateInfo*, const VkAllocationCallbacks*, VkPipelineLayout*> Binding::CreatePipelineLayout("vkCreatePipelineLayout");
Function<VkResult, VkDevice, const VkQueryPoolCreateInfo*, const VkAllocationCallbacks*, VkQueryPool*> Binding::CreateQueryPool("vkCreateQueryPool");
Function<VkResult, VkDevice, VkPipelineCache, uint32_t, const VkRayTracingPipelineCreateInfoNV*, const VkAllocationCallbacks*, VkPipeline*> Binding::CreateRayTracingPipelinesNV("vkCreateRayTracingPipelinesNV");
Function<VkResult, VkDevice, const VkRenderPassCreateInfo*, const VkAllocationCallbacks*, VkRenderPass*> Binding::CreateRenderPass("vkCreateRenderPass");
Function<VkResult, VkDevice, const VkRenderPassCreateInfo2KHR*, const VkAllocationCallbacks*, VkRenderPass*> Binding::CreateRenderPass2KHR("vkCreateRenderPass2KHR");
Function<VkResult, VkDevice, const VkSamplerCreateInfo*, const VkAllocationCallbacks*, VkSampler*> Binding::CreateSampler("vkCreateSampler");
Function<VkResult, VkDevice, const VkSamplerYcbcrConversionCreateInfo*, const VkAllocationCallbacks*, VkSamplerYcbcrConversion*> Binding::CreateSamplerYcbcrConversion("vkCreateSamplerYcbcrConversion");
Function<VkResult, VkDevice, const VkSamplerYcbcrConversionCreateInfo*, const VkAllocationCallbacks*, VkSamplerYcbcrConversion*> Binding::CreateSamplerYcbcrConversionKHR("vkCreateSamplerYcbcrConversionKHR");
Function<VkResult, VkDevice, const VkSemaphoreCreateInfo*, const VkAllocationCallbacks*, VkSemaphore*> Binding::CreateSemaphore("vkCreateSemaphore");
Function<VkResult, VkDevice, const VkShaderModuleCreateInfo*, const VkAllocationCallbacks*, VkShaderModule*> Binding::CreateShaderModule("vkCreateShaderModule");
Function<VkResult, VkDevice, uint32_t, const VkSwapchainCreateInfoKHR*, const VkAllocationCallbacks*, VkSwapchainKHR*> Binding::CreateSharedSwapchainsKHR("vkCreateSharedSwapchainsKHR");
Function<VkResult, VkDevice, const VkSwapchainCreateInfoKHR*, const VkAllocationCallbacks*, VkSwapchainKHR*> Binding::CreateSwapchainKHR("vkCreateSwapchainKHR");
Function<VkResult, VkDevice, const VkValidationCacheCreateInfoEXT*, const VkAllocationCallbacks*, VkValidationCacheEXT*> Binding::CreateValidationCacheEXT("vkCreateValidationCacheEXT");


} // namespace vkbinding