
#pragma once


#include <vkbinding/novk.h>
#include <vkbinding/vk/types.h>


namespace vk11
{



using vk::AHardwareBuffer;
using vk::ANativeWindow;
using vk::CAMetalLayer;
using vk::char;
using vk::char           ;
using vk::char            ;
using vk::char                             ;
using vk::const CAMetalLayer*      ;
using vk::const char*;
using vk::const char* ;
using vk::const char*     ;
using vk::const char*      ;
using vk::const char*            ;
using vk::const char*                      ;
using vk::const char*                        ;
using vk::const char*                                  ;
using vk::const char*                                                  ;
using vk::const char* const*      ;
using vk::const float;
using vk::const float* ;
using vk::const float*    ;
using vk::const int32_t*   ;
using vk::const SECURITY_ATTRIBUTES* ;
using vk::const SECURITY_ATTRIBUTES*       ;
using vk::const struct AHardwareBuffer*;
using vk::const struct VkBaseInStructure* ;
using vk::const uint32_t*;
using vk::const uint32_t* ;
using vk::const uint32_t*  ;
using vk::const uint32_t*    ;
using vk::const uint32_t*     ;
using vk::const uint32_t*        ;
using vk::const uint32_t*            ;
using vk::const uint32_t*               ;
using vk::const uint32_t*                  ;
using vk::const uint32_t*                   ;
using vk::const uint64_t* ;
using vk::const uint64_t*                  ;
using vk::const VkAccelerationStructureCreateInfoNV*;
using vk::const VkAccelerationStructureInfoNV*;
using vk::const VkAccelerationStructureMemoryRequirementsInfoNV*;
using vk::const VkAccelerationStructureNV*;
using vk::const VkAccelerationStructureNV* ;
using vk::const VkAcquireNextImageInfoKHR*;
using vk::const VkAllocationCallbacks*;
using vk::const VkAndroidSurfaceCreateInfoKHR*;
using vk::const VkApplicationInfo* ;
using vk::const VkAttachmentDescription* ;
using vk::const VkAttachmentDescription2KHR* ;
using vk::const VkAttachmentReference* ;
using vk::const VkAttachmentReference2KHR* ;
using vk::const VkAttachmentReference2KHR*         ;
using vk::const VkAttachmentReference2KHR*            ;
using vk::const VkAttachmentSampleLocationsEXT* ;
using vk::const VkBindAccelerationStructureMemoryInfoNV*;
using vk::const VkBindBufferMemoryInfo*;
using vk::const VkBindImageMemoryInfo*;
using vk::const VkBindSparseInfo*;
using vk::const VkBuffer*;
using vk::const VkBufferCopy*;
using vk::const VkBufferCreateInfo*;
using vk::const VkBufferDeviceAddressInfoEXT*;
using vk::const VkBufferImageCopy*;
using vk::const VkBufferMemoryBarrier*;
using vk::const VkBufferMemoryRequirementsInfo2*;
using vk::const VkBufferView*    ;
using vk::const VkBufferViewCreateInfo*;
using vk::const VkCalibratedTimestampInfoEXT*;
using vk::const VkClearAttachment*;
using vk::const VkClearColorValue*;
using vk::const VkClearDepthStencilValue*;
using vk::const VkClearRect*;
using vk::const VkClearValue*    ;
using vk::const VkCmdProcessCommandsInfoNVX*;
using vk::const VkCmdReserveSpaceForCommandsInfoNVX*;
using vk::const VkCoarseSampleLocationNV* ;
using vk::const VkCoarseSampleOrderCustomNV*;
using vk::const VkCoarseSampleOrderCustomNV*        ;
using vk::const VkCommandBuffer*;
using vk::const VkCommandBuffer*     ;
using vk::const VkCommandBufferAllocateInfo*;
using vk::const VkCommandBufferBeginInfo*;
using vk::const VkCommandBufferInheritanceInfo*       ;
using vk::const VkCommandPoolCreateInfo*;
using vk::const VkComputePipelineCreateInfo*;
using vk::const VkConditionalRenderingBeginInfoEXT*;
using vk::const VkCopyDescriptorSet*;
using vk::const VkDebugMarkerMarkerInfoEXT*;
using vk::const VkDebugMarkerObjectNameInfoEXT*;
using vk::const VkDebugMarkerObjectTagInfoEXT*;
using vk::const VkDebugReportCallbackCreateInfoEXT*;
using vk::const VkDebugUtilsLabelEXT*;
using vk::const VkDebugUtilsLabelEXT*                 ;
using vk::const VkDebugUtilsLabelEXT*                  ;
using vk::const VkDebugUtilsMessengerCallbackDataEXT*;
using vk::const VkDebugUtilsMessengerCreateInfoEXT*;
using vk::const VkDebugUtilsObjectNameInfoEXT*;
using vk::const VkDebugUtilsObjectNameInfoEXT*             ;
using vk::const VkDebugUtilsObjectTagInfoEXT*;
using vk::const VkDescriptorBindingFlagsEXT* ;
using vk::const VkDescriptorBufferInfo* ;
using vk::const VkDescriptorImageInfo* ;
using vk::const VkDescriptorPoolCreateInfo*;
using vk::const VkDescriptorPoolSize* ;
using vk::const VkDescriptorSet*;
using vk::const VkDescriptorSetAllocateInfo*;
using vk::const VkDescriptorSetLayout* ;
using vk::const VkDescriptorSetLayoutBinding* ;
using vk::const VkDescriptorSetLayoutCreateInfo*;
using vk::const VkDescriptorUpdateTemplateCreateInfo*;
using vk::const VkDescriptorUpdateTemplateEntry* ;
using vk::const VkDeviceCreateInfo*;
using vk::const VkDeviceEventInfoEXT*;
using vk::const VkDeviceMemory* ;
using vk::const VkDeviceMemory*            ;
using vk::const VkDeviceQueueCreateInfo* ;
using vk::const VkDeviceQueueInfo2*;
using vk::const VkDeviceSize*;
using vk::const VkDisplayEventInfoEXT*;
using vk::const VkDisplayModeCreateInfoKHR*;
using vk::const VkDisplayPlaneInfo2KHR*;
using vk::const VkDisplayPowerInfoEXT*;
using vk::const VkDisplaySurfaceCreateInfoKHR*;
using vk::const VkDynamicState*  ;
using vk::const VkEvent*;
using vk::const VkEventCreateInfo*;
using vk::const VkFence*;
using vk::const VkFenceCreateInfo*;
using vk::const VkFenceGetFdInfoKHR*;
using vk::const VkFenceGetWin32HandleInfoKHR*;
using vk::const VkFormat*    ;
using vk::const VkFormat*      ;
using vk::const VkFramebufferAttachmentImageInfoKHR* ;
using vk::const VkFramebufferCreateInfo*;
using vk::const VkGeometryNV* ;
using vk::const VkGraphicsPipelineCreateInfo*;
using vk::const VkHdrMetadataEXT*;
using vk::const VkHeadlessSurfaceCreateInfoEXT*;
using vk::const VkImageBlit*;
using vk::const VkImageCopy*;
using vk::const VkImageCreateInfo*;
using vk::const VkImageMemoryBarrier*;
using vk::const VkImageMemoryRequirementsInfo2*;
using vk::const VkImagePipeSurfaceCreateInfoFUCHSIA*;
using vk::const VkImageResolve*;
using vk::const VkImageSparseMemoryRequirementsInfo2*;
using vk::const VkImageSubresource*;
using vk::const VkImageSubresourceRange*;
using vk::const VkImageView* ;
using vk::const VkImageView*     ;
using vk::const VkImageViewCreateInfo*;
using vk::const VkImageViewHandleInfoNVX*;
using vk::const VkImportFenceFdInfoKHR*;
using vk::const VkImportFenceWin32HandleInfoKHR*;
using vk::const VkImportSemaphoreFdInfoKHR*;
using vk::const VkImportSemaphoreWin32HandleInfoKHR*;
using vk::const VkIndirectCommandsLayoutCreateInfoNVX*;
using vk::const VkIndirectCommandsLayoutTokenNVX*  ;
using vk::const VkIndirectCommandsTokenNVX*       ;
using vk::const VkInitializePerformanceApiInfoINTEL*;
using vk::const VkInputAttachmentAspectReference* ;
using vk::const VkInstanceCreateInfo*;
using vk::const VkIOSSurfaceCreateInfoMVK*;
using vk::const VkMacOSSurfaceCreateInfoMVK*;
using vk::const VkMappedMemoryRange*;
using vk::const VkMemoryAllocateInfo*;
using vk::const VkMemoryBarrier*;
using vk::const VkMemoryGetAndroidHardwareBufferInfoANDROID*;
using vk::const VkMemoryGetFdInfoKHR*;
using vk::const VkMemoryGetWin32HandleInfoKHR*;
using vk::const VkMetalSurfaceCreateInfoEXT*;
using vk::const VkObjectEntryTypeNVX*;
using vk::const VkObjectEntryTypeNVX*       ;
using vk::const VkObjectEntryUsageFlagsNVX* ;
using vk::const VkObjectTableCreateInfoNVX*;
using vk::const VkObjectTableEntryNVX* const*;
using vk::const VkPerformanceConfigurationAcquireInfoINTEL*;
using vk::const VkPerformanceMarkerInfoINTEL*;
using vk::const VkPerformanceOverrideInfoINTEL*;
using vk::const VkPerformanceStreamMarkerInfoINTEL*;
using vk::const VkPhysicalDevice*  ;
using vk::const VkPhysicalDeviceExternalBufferInfo*;
using vk::const VkPhysicalDeviceExternalFenceInfo*;
using vk::const VkPhysicalDeviceExternalSemaphoreInfo*;
using vk::const VkPhysicalDeviceFeatures* ;
using vk::const VkPhysicalDeviceImageFormatInfo2*;
using vk::const VkPhysicalDeviceSparseImageFormatInfo2*;
using vk::const VkPhysicalDeviceSurfaceInfo2KHR*;
using vk::const VkPipelineCache*;
using vk::const VkPipelineCacheCreateInfo*;
using vk::const VkPipelineColorBlendAttachmentState* ;
using vk::const VkPipelineColorBlendStateCreateInfo* ;
using vk::const VkPipelineDepthStencilStateCreateInfo* ;
using vk::const VkPipelineDynamicStateCreateInfo* ;
using vk::const VkPipelineInputAssemblyStateCreateInfo* ;
using vk::const VkPipelineLayoutCreateInfo*;
using vk::const VkPipelineMultisampleStateCreateInfo* ;
using vk::const VkPipelineRasterizationStateCreateInfo* ;
using vk::const VkPipelineShaderStageCreateInfo* ;
using vk::const VkPipelineStageFlags*           ;
using vk::const VkPipelineTessellationStateCreateInfo* ;
using vk::const VkPipelineVertexInputStateCreateInfo* ;
using vk::const VkPipelineViewportStateCreateInfo* ;
using vk::const VkPresentInfoKHR*;
using vk::const VkPresentRegionKHR*   ;
using vk::const VkPresentTimeGOOGLE*   ;
using vk::const VkPushConstantRange* ;
using vk::const VkQueryPoolCreateInfo*;
using vk::const VkRayTracingPipelineCreateInfoNV*;
using vk::const VkRayTracingShaderGroupCreateInfoNV* ;
using vk::const VkRect2D*;
using vk::const VkRect2D* ;
using vk::const VkRect2D*  ;
using vk::const VkRect2D*    ;
using vk::const VkRect2D*        ;
using vk::const VkRectLayerKHR*   ;
using vk::const VkRenderPassBeginInfo*;
using vk::const VkRenderPassCreateInfo*;
using vk::const VkRenderPassCreateInfo2KHR*;
using vk::const VkSampleLocationEXT* ;
using vk::const VkSampleLocationsInfoEXT*;
using vk::const VkSampleMask*    ;
using vk::const VkSampler*       ;
using vk::const VkSamplerCreateInfo*;
using vk::const VkSamplerYcbcrConversionCreateInfo*;
using vk::const VkSemaphore*;
using vk::const VkSemaphore* ;
using vk::const VkSemaphore*     ;
using vk::const VkSemaphoreCreateInfo*;
using vk::const VkSemaphoreGetFdInfoKHR*;
using vk::const VkSemaphoreGetWin32HandleInfoKHR*;
using vk::const VkShaderModuleCreateInfo*;
using vk::const VkShadingRatePaletteEntryNV*  ;
using vk::const VkShadingRatePaletteNV*;
using vk::const VkShadingRatePaletteNV*      ;
using vk::const VkSparseBufferMemoryBindInfo* ;
using vk::const VkSparseImageMemoryBind* ;
using vk::const VkSparseImageMemoryBindInfo* ;
using vk::const VkSparseImageOpaqueMemoryBindInfo* ;
using vk::const VkSparseMemoryBind* ;
using vk::const VkSpecializationInfo* ;
using vk::const VkSpecializationMapEntry* ;
using vk::const VkStreamDescriptorSurfaceCreateInfoGGP*;
using vk::const VkSubmitInfo*;
using vk::const VkSubpassBeginInfoKHR*;
using vk::const VkSubpassDependency* ;
using vk::const VkSubpassDependency2KHR*     ;
using vk::const VkSubpassDescription* ;
using vk::const VkSubpassDescription2KHR*       ;
using vk::const VkSubpassEndInfoKHR*;
using vk::const VkSubpassSampleLocationsEXT* ;
using vk::const VkSubresourceLayout* ;
using vk::const VkSwapchainCreateInfoKHR*;
using vk::const VkSwapchainKHR*;
using vk::const VkSwapchainKHR* ;
using vk::const VkValidationCacheCreateInfoEXT*;
using vk::const VkValidationCacheEXT*;
using vk::const VkValidationCheckEXT* ;
using vk::const VkValidationFeatureDisableEXT* ;
using vk::const VkValidationFeatureEnableEXT* ;
using vk::const VkVertexInputAttributeDescription* ;
using vk::const VkVertexInputBindingDescription* ;
using vk::const VkVertexInputBindingDivisorDescriptionEXT*      ;
using vk::const VkViewport*;
using vk::const VkViewport*      ;
using vk::const VkViewportSwizzleNV*      ;
using vk::const VkViewportWScalingNV*;
using vk::const VkViewportWScalingNV*      ;
using vk::const VkViSurfaceCreateInfoNN*;
using vk::const VkWaylandSurfaceCreateInfoKHR*;
using vk::const VkWin32SurfaceCreateInfoKHR*;
using vk::const VkWriteDescriptorSet*;
using vk::const VkXcbSurfaceCreateInfoKHR*;
using vk::const VkXlibSurfaceCreateInfoKHR*;
using vk::const void*;
using vk::const void* ;
using vk::const void*  ;
using vk::const void*    ;
using vk::const void*     ;
using vk::const void*      ;
using vk::const void*        ;
using vk::const void*            ;
using vk::const void*              ;
using vk::const void*                ;
using vk::const void*                    ;
using vk::const void*                     ;
using vk::const void*                      ;
using vk::const void*                        ;
using vk::const void*                         ;
using vk::const void*                           ;
using vk::const void*                            ;
using vk::const void*                              ;
using vk::const void*                               ;
using vk::const void*                                ;
using vk::const void*                                    ;
using vk::const void*                                        ;
using vk::const void*                                          ;
using vk::const void*                                            ;
using vk::const void*                                              ;
using vk::const void*                                                    ;
using vk::const void*                                                      ;
using vk::const void*                                                        ;
using vk::const void*                                                          ;
using vk::const void*                                                            ;
using vk::const void*                                                                 ;
using vk::const void*                                                                      ;
using vk::Display;
using vk::Display*;
using vk::Display*                         ;
using vk::DWORD;
using vk::DWORD                            ;
using vk::DWORD                                      ;
using vk::float;
using vk::float ;
using vk::float   ;
using vk::float          ;
using vk::float            ;
using vk::float                  ;
using vk::float                       ;
using vk::float                            ;
using vk::float                              ;
using vk::float                                                                            ;
using vk::GgpFrameToken;
using vk::GgpFrameToken                    ;
using vk::GgpStreamDescriptor;
using vk::GgpStreamDescriptor              ;
using vk::HANDLE;
using vk::HANDLE           ;
using vk::HANDLE                           ;
using vk::HANDLE                             ;
using vk::HANDLE*;
using vk::HINSTANCE;
using vk::HINSTANCE                        ;
using vk::HMONITOR;
using vk::HMONITOR         ;
using vk::HWND;
using vk::HWND                             ;
using vk::int;
using vk::int ;
using vk::int                              ;
using vk::int                                    ;
using vk::int*;
using vk::int32_t;
using vk::int32_t        ;
using vk::int32_t           ;
using vk::int32_t                ;
using vk::int32_t                        ;
using vk::int32_t                                                            ;
using vk::LPCWSTR;
using vk::LPCWSTR          ;
using vk::LPCWSTR                          ;
using vk::LPCWSTR                            ;
using vk::LPCWSTR                                    ;
using vk::PFN_vkAllocationFunction;
using vk::PFN_vkAllocationFunction   ;
using vk::PFN_vkDebugReportCallbackEXT;
using vk::PFN_vkDebugReportCallbackEXT     ;
using vk::PFN_vkDebugUtilsMessengerCallbackEXT;
using vk::PFN_vkDebugUtilsMessengerCallbackEXT                 ;
using vk::PFN_vkFreeFunction;
using vk::PFN_vkFreeFunction    ;
using vk::PFN_vkInternalAllocationNotification;
using vk::PFN_vkInternalAllocationNotification ;
using vk::PFN_vkInternalFreeNotification;
using vk::PFN_vkInternalFreeNotification ;
using vk::PFN_vkReallocationFunction;
using vk::PFN_vkReallocationFunction ;
using vk::PFN_vkVoidFunction;
using vk::RROutput;
using vk::SECURITY_ATTRIBUTES;
using vk::size_t;
using vk::size_t ;
using vk::size_t                 ;
using vk::size_t                           ;
using vk::size_t                                 ;
using vk::size_t*;
using vk::struct AHardwareBuffer*            ;
using vk::struct AHardwareBuffer**;
using vk::struct ANativeWindow*    ;
using vk::struct VkBaseOutStructure* ;
using vk::struct wl_display*;
using vk::struct wl_display*               ;
using vk::struct wl_surface*               ;
using vk::uint16_t;
using vk::uint16_t                                         ;
using vk::uint32_t;
using vk::uint32_t ;
using vk::uint32_t   ;
using vk::uint32_t       ;
using vk::uint32_t        ;
using vk::uint32_t         ;
using vk::uint32_t          ;
using vk::uint32_t               ;
using vk::uint32_t                 ;
using vk::uint32_t                   ;
using vk::uint32_t                     ;
using vk::uint32_t                      ;
using vk::uint32_t                       ;
using vk::uint32_t                        ;
using vk::uint32_t                         ;
using vk::uint32_t                          ;
using vk::uint32_t                           ;
using vk::uint32_t                            ;
using vk::uint32_t                                 ;
using vk::uint32_t                                    ;
using vk::uint32_t                                       ;
using vk::uint32_t                                         ;
using vk::uint32_t                                          ;
using vk::uint32_t                                               ;
using vk::uint32_t                                                 ;
using vk::uint32_t                                                    ;
using vk::uint32_t                                                         ;
using vk::uint32_t                                                           ;
using vk::uint32_t                                                               ;
using vk::uint32_t                                                                         ;
using vk::uint32_t*;
using vk::uint64_t;
using vk::uint64_t ;
using vk::uint64_t                         ;
using vk::uint64_t                           ;
using vk::uint64_t                            ;
using vk::uint64_t                               ;
using vk::uint64_t                                               ;
using vk::uint64_t*;
using vk::uint8_t;
using vk::uint8_t        ;
using vk::uint8_t                          ;
using vk::UNGROUPED;
using vk::UnusedMask;
using vk::VisualID;
using vk::VK_API_VERSION;
using vk::VK_API_VERSION_1_0;
using vk::VK_API_VERSION_1_1;
using vk::VK_DEFINE_HANDLE;
using vk::VK_DEFINE_NON_DISPATCHABLE_HANDLE;
using vk::VK_HEADER_VERSION;
using vk::VK_MAKE_VERSION;
using vk::VK_NULL_HANDLE;
using vk::VK_VERSION_MAJOR;
using vk::VK_VERSION_MINOR;
using vk::VK_VERSION_PATCH;
using vk::VkAccelerationStructureInfoNV          ;
using vk::VkAccelerationStructureMemoryRequirementsTypeNV;
using vk::VkAccelerationStructureMemoryRequirementsTypeNV                      ;
using vk::VkAccelerationStructureNV;
using vk::VkAccelerationStructureNV        ;
using vk::VkAccelerationStructureNV                                            ;
using vk::VkAccelerationStructureNV*;
using vk::VkAccelerationStructureTypeNV;
using vk::VkAccelerationStructureTypeNV         ;
using vk::VkAccessFlagBits;
using vk::VkAccessFlags     ;
using vk::VkAccessFlags          ;
using vk::VkAndroidHardwareBufferPropertiesANDROID*;
using vk::VkAndroidSurfaceCreateFlagsKHR ;
using vk::VkAttachmentDescriptionFlagBits;
using vk::VkAttachmentDescriptionFlags ;
using vk::VkAttachmentLoadOp;
using vk::VkAttachmentLoadOp     ;
using vk::VkAttachmentLoadOp                           ;
using vk::VkAttachmentReference            ;
using vk::VkAttachmentStoreOp;
using vk::VkAttachmentStoreOp    ;
using vk::VkAttachmentStoreOp                          ;
using vk::VkBlendFactor;
using vk::VkBlendFactor          ;
using vk::VkBlendOp;
using vk::VkBlendOp              ;
using vk::VkBlendOverlapEXT;
using vk::VkBlendOverlapEXT      ;
using vk::VkBool32;
using vk::VkBool32 ;
using vk::VkBool32       ;
using vk::VkBool32         ;
using vk::VkBool32               ;
using vk::VkBool32                       ;
using vk::VkBool32                        ;
using vk::VkBool32                         ;
using vk::VkBool32                           ;
using vk::VkBool32                            ;
using vk::VkBool32                             ;
using vk::VkBool32                                 ;
using vk::VkBool32                                                         ;
using vk::VkBool32                                                               ;
using vk::VkBool32                                                                    ;
using vk::VkBool32                                                                         ;
using vk::VkBool32*;
using vk::VkBorderColor;
using vk::VkBorderColor          ;
using vk::VkBuffer;
using vk::VkBuffer ;
using vk::VkBuffer   ;
using vk::VkBuffer         ;
using vk::VkBuffer               ;
using vk::VkBuffer                     ;
using vk::VkBuffer                         ;
using vk::VkBuffer                                 ;
using vk::VkBuffer                                               ;
using vk::VkBuffer                                                             ;
using vk::VkBuffer*;
using vk::VkBufferCreateFlagBits;
using vk::VkBufferCreateFlags ;
using vk::VkBufferCreateFlags    ;
using vk::VkBufferUsageFlagBits;
using vk::VkBufferUsageFlags     ;
using vk::VkBufferUsageFlags               ;
using vk::VkBufferView;
using vk::VkBufferView*;
using vk::VkBufferViewCreateFlagBits;
using vk::VkBufferViewCreateFlags;
using vk::VkBuildAccelerationStructureFlagBitsNV;
using vk::VkBuildAccelerationStructureFlagsNV;
using vk::VkCheckpointDataNV*;
using vk::VkChromaLocation;
using vk::VkChromaLocation;
using vk::VkChromaLocation              ;
using vk::VkChromaLocation                   ;
using vk::VkChromaLocationKHR;
using vk::VkClearColorValue      ;
using vk::VkClearDepthStencilValue ;
using vk::VkClearValue           ;
using vk::VkCoarseSampleOrderTypeNV;
using vk::VkCoarseSampleOrderTypeNV                                              ;
using vk::VkColorComponentFlagBits;
using vk::VkColorComponentFlags  ;
using vk::VkColorSpaceKHR;
using vk::VkColorSpaceKHR                  ;
using vk::VkCommandBuffer;
using vk::VkCommandBuffer                          ;
using vk::VkCommandBuffer*;
using vk::VkCommandBufferLevel;
using vk::VkCommandBufferLevel   ;
using vk::VkCommandBufferResetFlagBits;
using vk::VkCommandBufferResetFlags;
using vk::VkCommandBufferUsageFlagBits;
using vk::VkCommandBufferUsageFlags  ;
using vk::VkCommandPool;
using vk::VkCommandPool          ;
using vk::VkCommandPool*;
using vk::VkCommandPoolCreateFlagBits;
using vk::VkCommandPoolCreateFlags   ;
using vk::VkCommandPoolResetFlagBits;
using vk::VkCommandPoolResetFlags;
using vk::VkCommandPoolTrimFlags;
using vk::VkCompareOp;
using vk::VkCompareOp            ;
using vk::VkComponentMapping     ;
using vk::VkComponentMapping               ;
using vk::VkComponentMapping                 ;
using vk::VkComponentSwizzle;
using vk::VkComponentSwizzle ;
using vk::VkComponentTypeNV;
using vk::VkComponentTypeNV                   ;
using vk::VkCompositeAlphaFlagBitsKHR;
using vk::VkCompositeAlphaFlagBitsKHR      ;
using vk::VkCompositeAlphaFlagsKHR         ;
using vk::VkConditionalRenderingFlagBitsEXT;
using vk::VkConditionalRenderingFlagsEXT    ;
using vk::VkConformanceVersionKHR          ;
using vk::VkConservativeRasterizationModeEXT;
using vk::VkConservativeRasterizationModeEXT                                               ;
using vk::VkCooperativeMatrixPropertiesNV*;
using vk::VkCopyAccelerationStructureModeNV;
using vk::VkCoverageModulationModeNV;
using vk::VkCoverageModulationModeNV                                                       ;
using vk::VkCoverageReductionModeNV;
using vk::VkCoverageReductionModeNV  ;
using vk::VkCoverageReductionModeNV                                          ;
using vk::VkCullModeFlagBits;
using vk::VkCullModeFlags        ;
using vk::VkDebugReportCallbackEXT;
using vk::VkDebugReportCallbackEXT*;
using vk::VkDebugReportFlagBitsEXT;
using vk::VkDebugReportFlagsEXT;
using vk::VkDebugReportFlagsEXT            ;
using vk::VkDebugReportObjectTypeEXT;
using vk::VkDebugReportObjectTypeEXT       ;
using vk::VkDebugUtilsMessageSeverityFlagBitsEXT;
using vk::VkDebugUtilsMessageSeverityFlagsEXT                  ;
using vk::VkDebugUtilsMessageTypeFlagBitsEXT;
using vk::VkDebugUtilsMessageTypeFlagsEXT;
using vk::VkDebugUtilsMessageTypeFlagsEXT                      ;
using vk::VkDebugUtilsMessengerCallbackDataFlagsEXT                          ;
using vk::VkDebugUtilsMessengerCreateFlagsEXT  ;
using vk::VkDebugUtilsMessengerEXT;
using vk::VkDebugUtilsMessengerEXT*;
using vk::VkDependencyFlagBits;
using vk::VkDependencyFlags;
using vk::VkDependencyFlags ;
using vk::VkDependencyFlags      ;
using vk::VkDescriptorBindingFlagBitsEXT;
using vk::VkDescriptorPool;
using vk::VkDescriptorPool       ;
using vk::VkDescriptorPool*;
using vk::VkDescriptorPoolCreateFlagBits;
using vk::VkDescriptorPoolCreateFlags  ;
using vk::VkDescriptorPoolResetFlags;
using vk::VkDescriptorSet;
using vk::VkDescriptorSet        ;
using vk::VkDescriptorSet              ;
using vk::VkDescriptorSet*;
using vk::VkDescriptorSetLayout;
using vk::VkDescriptorSetLayout ;
using vk::VkDescriptorSetLayout*;
using vk::VkDescriptorSetLayoutCreateFlagBits;
using vk::VkDescriptorSetLayoutCreateFlags    ;
using vk::VkDescriptorSetLayoutSupport*;
using vk::VkDescriptorType;
using vk::VkDescriptorType       ;
using vk::VkDescriptorType                 ;
using vk::VkDescriptorType                    ;
using vk::VkDescriptorUpdateTemplate;
using vk::VkDescriptorUpdateTemplate*;
using vk::VkDescriptorUpdateTemplateCreateFlags    ;
using vk::VkDescriptorUpdateTemplateKHR;
using vk::VkDescriptorUpdateTemplateType;
using vk::VkDescriptorUpdateTemplateType;
using vk::VkDescriptorUpdateTemplateType ;
using vk::VkDescriptorUpdateTemplateTypeKHR;
using vk::VkDevice;
using vk::VkDevice*;
using vk::VkDeviceAddress;
using vk::VkDeviceAddress                  ;
using vk::VkDeviceCreateFlagBits;
using vk::VkDeviceCreateFlags    ;
using vk::VkDeviceEventTypeEXT;
using vk::VkDeviceEventTypeEXT             ;
using vk::VkDeviceGeneratedCommandsFeaturesNVX*;
using vk::VkDeviceGeneratedCommandsLimitsNVX*;
using vk::VkDeviceGroupPresentCapabilitiesKHR*;
using vk::VkDeviceGroupPresentModeFlagBitsKHR;
using vk::VkDeviceGroupPresentModeFlagBitsKHR ;
using vk::VkDeviceGroupPresentModeFlagsKHR ;
using vk::VkDeviceGroupPresentModeFlagsKHR                         ;
using vk::VkDeviceGroupPresentModeFlagsKHR*;
using vk::VkDeviceMemory;
using vk::VkDeviceMemory         ;
using vk::VkDeviceMemory                   ;
using vk::VkDeviceMemory                     ;
using vk::VkDeviceMemory*;
using vk::VkDeviceQueueCreateFlagBits;
using vk::VkDeviceQueueCreateFlags    ;
using vk::VkDeviceQueueCreateFlags            ;
using vk::VkDeviceSize;
using vk::VkDeviceSize ;
using vk::VkDeviceSize           ;
using vk::VkDeviceSize               ;
using vk::VkDeviceSize                     ;
using vk::VkDeviceSize                       ;
using vk::VkDeviceSize                           ;
using vk::VkDeviceSize                             ;
using vk::VkDeviceSize*;
using vk::VkDiscardRectangleModeEXT;
using vk::VkDiscardRectangleModeEXT                                                        ;
using vk::VkDisplayEventTypeEXT;
using vk::VkDisplayEventTypeEXT            ;
using vk::VkDisplayKHR;
using vk::VkDisplayKHR                     ;
using vk::VkDisplayKHR*;
using vk::VkDisplayModeCreateFlagsKHR      ;
using vk::VkDisplayModeKHR;
using vk::VkDisplayModeKHR ;
using vk::VkDisplayModeKHR                 ;
using vk::VkDisplayModeKHR*;
using vk::VkDisplayModeParametersKHR       ;
using vk::VkDisplayModeProperties2KHR*;
using vk::VkDisplayModePropertiesKHR ;
using vk::VkDisplayModePropertiesKHR*;
using vk::VkDisplayPlaneAlphaFlagBitsKHR;
using vk::VkDisplayPlaneAlphaFlagBitsKHR   ;
using vk::VkDisplayPlaneAlphaFlagsKHR      ;
using vk::VkDisplayPlaneCapabilities2KHR*;
using vk::VkDisplayPlaneCapabilitiesKHR ;
using vk::VkDisplayPlaneCapabilitiesKHR*;
using vk::VkDisplayPlaneProperties2KHR*;
using vk::VkDisplayPlanePropertiesKHR ;
using vk::VkDisplayPlanePropertiesKHR*;
using vk::VkDisplayPowerStateEXT;
using vk::VkDisplayPowerStateEXT           ;
using vk::VkDisplayProperties2KHR*;
using vk::VkDisplayPropertiesKHR ;
using vk::VkDisplayPropertiesKHR*;
using vk::VkDisplaySurfaceCreateFlagsKHR   ;
using vk::VkDriverIdKHR;
using vk::VkDriverIdKHR                    ;
using vk::VkDrmFormatModifierPropertiesEXT* ;
using vk::VkDynamicState;
using vk::VKenum;
using vk::VkEvent;
using vk::VkEvent*;
using vk::VkEventCreateFlags     ;
using vk::VKextension;
using vk::VkExtensionProperties*;
using vk::VkExtent2D ;
using vk::VkExtent2D     ;
using vk::VkExtent2D                       ;
using vk::VkExtent2D                          ;
using vk::VkExtent2D                             ;
using vk::VkExtent2D*;
using vk::VkExtent3D             ;
using vk::VkExternalBufferProperties*;
using vk::VkExternalFenceFeatureFlagBits;
using vk::VkExternalFenceFeatureFlagBitsKHR;
using vk::VkExternalFenceFeatureFlags ;
using vk::VkExternalFenceHandleTypeFlagBits;
using vk::VkExternalFenceHandleTypeFlagBits ;
using vk::VkExternalFenceHandleTypeFlagBits  ;
using vk::VkExternalFenceHandleTypeFlagBits   ;
using vk::VkExternalFenceHandleTypeFlagBitsKHR;
using vk::VkExternalFenceHandleTypeFlags ;
using vk::VkExternalFenceProperties*;
using vk::VkExternalImageFormatPropertiesNV*;
using vk::VkExternalMemoryFeatureFlagBits;
using vk::VkExternalMemoryFeatureFlagBitsKHR;
using vk::VkExternalMemoryFeatureFlagBitsNV;
using vk::VkExternalMemoryFeatureFlags  ;
using vk::VkExternalMemoryFeatureFlagsNV   ;
using vk::VkExternalMemoryHandleTypeFlagBits;
using vk::VkExternalMemoryHandleTypeFlagBits ;
using vk::VkExternalMemoryHandleTypeFlagBitsKHR;
using vk::VkExternalMemoryHandleTypeFlagBitsNV;
using vk::VkExternalMemoryHandleTypeFlags ;
using vk::VkExternalMemoryHandleTypeFlagsNV;
using vk::VkExternalMemoryHandleTypeFlagsNV ;
using vk::VkExternalMemoryProperties ;
using vk::VkExternalMemoryProperties    ;
using vk::VkExternalSemaphoreFeatureFlagBits;
using vk::VkExternalSemaphoreFeatureFlagBitsKHR;
using vk::VkExternalSemaphoreFeatureFlags ;
using vk::VkExternalSemaphoreHandleTypeFlagBits;
using vk::VkExternalSemaphoreHandleTypeFlagBits ;
using vk::VkExternalSemaphoreHandleTypeFlagBitsKHR;
using vk::VkExternalSemaphoreHandleTypeFlags ;
using vk::VkExternalSemaphoreProperties*;
using vk::VkFence;
using vk::VkFence ;
using vk::VkFence              ;
using vk::VkFence                          ;
using vk::VkFence                                ;
using vk::VkFence*;
using vk::VkFenceCreateFlagBits;
using vk::VkFenceCreateFlags     ;
using vk::VkFenceImportFlagBits;
using vk::VkFenceImportFlagBitsKHR;
using vk::VkFenceImportFlags  ;
using vk::VkFenceImportFlags              ;
using vk::VkFilter;
using vk::VkFilter               ;
using vk::VkFilter                         ;
using vk::VkFlags;
using vk::VkFormat;
using vk::VkFormat               ;
using vk::VkFormat                   ;
using vk::VkFormat                         ;
using vk::VkFormat                           ;
using vk::VkFormat                                     ;
using vk::VkFormatFeatureFlagBits;
using vk::VkFormatFeatureFlags ;
using vk::VkFormatFeatureFlags   ;
using vk::VkFormatFeatureFlags               ;
using vk::VkFormatProperties               ;
using vk::VkFormatProperties*;
using vk::VkFormatProperties2*;
using vk::VkFramebuffer;
using vk::VkFramebuffer   ;
using vk::VkFramebuffer          ;
using vk::VkFramebuffer*;
using vk::VkFramebufferCreateFlagBits;
using vk::VkFramebufferCreateFlags    ;
using vk::VkFramebufferMixedSamplesCombinationNV*;
using vk::VkFrontFace;
using vk::VkFrontFace            ;
using vk::VkFullScreenExclusiveEXT;
using vk::VkFullScreenExclusiveEXT         ;
using vk::VkGeometryAABBNV                       ;
using vk::VkGeometryDataNV                  ;
using vk::VkGeometryFlagBitsNV;
using vk::VkGeometryFlagsNV ;
using vk::VkGeometryInstanceFlagBitsNV;
using vk::VkGeometryTrianglesNV                  ;
using vk::VkGeometryTypeNV;
using vk::VkGeometryTypeNV                  ;
using vk::VkHeadlessSurfaceCreateFlagsEXT   ;
using vk::VkImage;
using vk::VkImage ;
using vk::VkImage          ;
using vk::VkImage                ;
using vk::VkImage                          ;
using vk::VkImage                                                              ;
using vk::VkImage*;
using vk::VkImageAspectFlagBits;
using vk::VkImageAspectFlagBits            ;
using vk::VkImageAspectFlags ;
using vk::VkImageAspectFlags     ;
using vk::VkImageAspectFlags              ;
using vk::VkImageCreateFlagBits;
using vk::VkImageCreateFlags;
using vk::VkImageCreateFlags ;
using vk::VkImageCreateFlags     ;
using vk::VkImageCreateFlags       ;
using vk::VkImageDrmFormatModifierPropertiesEXT*;
using vk::VkImageFormatProperties          ;
using vk::VkImageFormatProperties*;
using vk::VkImageFormatProperties2*;
using vk::VkImageLayout;
using vk::VkImageLayout   ;
using vk::VkImageLayout          ;
using vk::VkImageLayout                     ;
using vk::VkImageLayout                                ;
using vk::VkImagePipeSurfaceCreateFlagsFUCHSIA   ;
using vk::VkImageSubresource     ;
using vk::VkImageSubresourceLayers ;
using vk::VkImageSubresourceRange ;
using vk::VkImageTiling;
using vk::VkImageTiling          ;
using vk::VkImageTiling                    ;
using vk::VkImageType;
using vk::VkImageType            ;
using vk::VkImageType                      ;
using vk::VkImageUsageFlagBits;
using vk::VkImageUsageFlags;
using vk::VkImageUsageFlags ;
using vk::VkImageUsageFlags      ;
using vk::VkImageUsageFlags                ;
using vk::VkImageUsageFlags                        ;
using vk::VkImageView;
using vk::VkImageView     ;
using vk::VkImageView                         ;
using vk::VkImageView*;
using vk::VkImageViewCreateFlagBits;
using vk::VkImageViewCreateFlags ;
using vk::VkImageViewType;
using vk::VkImageViewType        ;
using vk::VkImageViewType                  ;
using vk::VkIndexType;
using vk::VkIndexType                ;
using vk::VkIndexType                  ;
using vk::VkIndirectCommandsLayoutNVX;
using vk::VkIndirectCommandsLayoutNVX                              ;
using vk::VkIndirectCommandsLayoutNVX*;
using vk::VkIndirectCommandsLayoutUsageFlagBitsNVX;
using vk::VkIndirectCommandsLayoutUsageFlagsNVX    ;
using vk::VkIndirectCommandsTokenTypeNVX;
using vk::VkIndirectCommandsTokenTypeNVX      ;
using vk::VkInstance;
using vk::VkInstance*;
using vk::VkInstanceCreateFlagBits;
using vk::VkInstanceCreateFlags  ;
using vk::VkInternalAllocationType;
using vk::VkIOSSurfaceCreateFlagsMVK     ;
using vk::VkLayerProperties*;
using vk::VkLineRasterizationModeEXT;
using vk::VkLineRasterizationModeEXT                                       ;
using vk::VkLogicOp;
using vk::VkLogicOp              ;
using vk::VkMacOSSurfaceCreateFlagsMVK   ;
using vk::VkMemoryAllocateFlagBits;
using vk::VkMemoryAllocateFlagBitsKHR;
using vk::VkMemoryAllocateFlags ;
using vk::VkMemoryFdPropertiesKHR*;
using vk::VkMemoryHeap           ;
using vk::VkMemoryHeapFlagBits;
using vk::VkMemoryHeapFlags      ;
using vk::VkMemoryHostPointerPropertiesEXT*;
using vk::VkMemoryMapFlags;
using vk::VkMemoryOverallocationBehaviorAMD;
using vk::VkMemoryOverallocationBehaviorAMD ;
using vk::VkMemoryPropertyFlagBits;
using vk::VkMemoryPropertyFlags  ;
using vk::VkMemoryRequirements                                                 ;
using vk::VkMemoryRequirements*;
using vk::VkMemoryRequirements2*;
using vk::VkMemoryRequirements2KHR*;
using vk::VkMemoryType           ;
using vk::VkMemoryWin32HandlePropertiesKHR*;
using vk::VkMetalSurfaceCreateFlagsEXT   ;
using vk::VkMultisamplePropertiesEXT*;
using vk::VkNativeBufferUsage2ANDROID ;
using vk::VkObjectEntryTypeNVX;
using vk::VkObjectEntryTypeNVX         ;
using vk::VkObjectEntryUsageFlagBitsNVX;
using vk::VkObjectEntryUsageFlagsNVX   ;
using vk::VkObjectTableNVX;
using vk::VkObjectTableNVX                                         ;
using vk::VkObjectTableNVX*;
using vk::VkObjectType;
using vk::VkObjectType                           ;
using vk::VkObjectType                                           ;
using vk::VkOffset2D     ;
using vk::VkOffset2D                       ;
using vk::VkOffset3D             ;
using vk::VkPastPresentationTimingGOOGLE*;
using vk::VkPeerMemoryFeatureFlagBits;
using vk::VkPeerMemoryFeatureFlagBitsKHR;
using vk::VkPeerMemoryFeatureFlags*;
using vk::VkPerformanceConfigurationINTEL;
using vk::VkPerformanceConfigurationINTEL*;
using vk::VkPerformanceConfigurationTypeINTEL;
using vk::VkPerformanceConfigurationTypeINTEL ;
using vk::VkPerformanceOverrideTypeINTEL;
using vk::VkPerformanceOverrideTypeINTEL      ;
using vk::VkPerformanceParameterTypeINTEL;
using vk::VkPerformanceValueDataINTEL        ;
using vk::VkPerformanceValueINTEL*;
using vk::VkPerformanceValueTypeINTEL;
using vk::VkPerformanceValueTypeINTEL        ;
using vk::VkPhysicalDevice;
using vk::VkPhysicalDevice                 ;
using vk::VkPhysicalDevice*;
using vk::VkPhysicalDeviceFeatures         ;
using vk::VkPhysicalDeviceFeatures*;
using vk::VkPhysicalDeviceFeatures2*;
using vk::VkPhysicalDeviceGroupProperties*;
using vk::VkPhysicalDeviceLimits ;
using vk::VkPhysicalDeviceMemoryProperties ;
using vk::VkPhysicalDeviceMemoryProperties*;
using vk::VkPhysicalDeviceMemoryProperties2*;
using vk::VkPhysicalDeviceProperties       ;
using vk::VkPhysicalDeviceProperties*;
using vk::VkPhysicalDeviceProperties2*;
using vk::VkPhysicalDeviceSparseProperties ;
using vk::VkPhysicalDeviceType;
using vk::VkPhysicalDeviceType ;
using vk::VkPipeline;
using vk::VkPipeline      ;
using vk::VkPipeline                   ;
using vk::VkPipeline*;
using vk::VkPipelineBindPoint;
using vk::VkPipelineBindPoint ;
using vk::VkPipelineBindPoint    ;
using vk::VkPipelineBindPoint                      ;
using vk::VkPipelineBindPoint                                         ;
using vk::VkPipelineCache;
using vk::VkPipelineCache*;
using vk::VkPipelineCacheCreateFlagBits;
using vk::VkPipelineCacheCreateFlags    ;
using vk::VkPipelineCacheHeaderVersion;
using vk::VkPipelineColorBlendStateCreateFlagBits;
using vk::VkPipelineColorBlendStateCreateFlags    ;
using vk::VkPipelineCoverageModulationStateCreateFlagsNV                   ;
using vk::VkPipelineCoverageReductionStateCreateFlagsNV      ;
using vk::VkPipelineCoverageToColorStateCreateFlagsNV                    ;
using vk::VkPipelineCreateFlagBits;
using vk::VkPipelineCreateFlags  ;
using vk::VkPipelineCreationFeedbackEXT* ;
using vk::VkPipelineCreationFeedbackEXT*      ;
using vk::VkPipelineCreationFeedbackFlagBitsEXT;
using vk::VkPipelineCreationFeedbackFlagsEXT  ;
using vk::VkPipelineDepthStencilStateCreateFlagBits;
using vk::VkPipelineDepthStencilStateCreateFlags    ;
using vk::VkPipelineDiscardRectangleStateCreateFlagsEXT                    ;
using vk::VkPipelineDynamicStateCreateFlagBits;
using vk::VkPipelineDynamicStateCreateFlags    ;
using vk::VkPipelineInputAssemblyStateCreateFlagBits;
using vk::VkPipelineInputAssemblyStateCreateFlags    ;
using vk::VkPipelineLayout;
using vk::VkPipelineLayout       ;
using vk::VkPipelineLayout             ;
using vk::VkPipelineLayout*;
using vk::VkPipelineLayoutCreateFlagBits;
using vk::VkPipelineLayoutCreateFlags    ;
using vk::VkPipelineMultisampleStateCreateFlagBits;
using vk::VkPipelineMultisampleStateCreateFlags    ;
using vk::VkPipelineRasterizationConservativeStateCreateFlagsEXT           ;
using vk::VkPipelineRasterizationDepthClipStateCreateFlagsEXT         ;
using vk::VkPipelineRasterizationStateCreateFlagBits;
using vk::VkPipelineRasterizationStateCreateFlags    ;
using vk::VkPipelineRasterizationStateStreamCreateFlagsEXT                 ;
using vk::VkPipelineShaderStageCreateFlagBits;
using vk::VkPipelineShaderStageCreateFlags    ;
using vk::VkPipelineShaderStageCreateInfo ;
using vk::VkPipelineStageFlagBits;
using vk::VkPipelineStageFlagBits   ;
using vk::VkPipelineStageFlags;
using vk::VkPipelineStageFlags ;
using vk::VkPipelineStageFlags   ;
using vk::VkPipelineStageFlags              ;
using vk::VkPipelineTessellationStateCreateFlagBits;
using vk::VkPipelineTessellationStateCreateFlags    ;
using vk::VkPipelineVertexInputStateCreateFlagBits;
using vk::VkPipelineVertexInputStateCreateFlags    ;
using vk::VkPipelineViewportStateCreateFlagBits;
using vk::VkPipelineViewportStateCreateFlags    ;
using vk::VkPipelineViewportSwizzleStateCreateFlagsNV    ;
using vk::VkPointClippingBehavior;
using vk::VkPointClippingBehavior;
using vk::VkPointClippingBehavior      ;
using vk::VkPointClippingBehaviorKHR;
using vk::VkPolygonMode;
using vk::VkPolygonMode          ;
using vk::VkPresentModeKHR;
using vk::VkPresentModeKHR                 ;
using vk::VkPresentModeKHR*;
using vk::VkPrimitiveTopology;
using vk::VkPrimitiveTopology    ;
using vk::VkQueryControlFlagBits;
using vk::VkQueryControlFlags;
using vk::VkQueryControlFlags    ;
using vk::VkQueryPipelineStatisticFlagBits;
using vk::VkQueryPipelineStatisticFlags ;
using vk::VkQueryPool;
using vk::VkQueryPool*;
using vk::VkQueryPoolCreateFlagBits;
using vk::VkQueryPoolCreateFlags ;
using vk::VkQueryPoolSamplingModeINTEL;
using vk::VkQueryPoolSamplingModeINTEL        ;
using vk::VkQueryResultFlagBits;
using vk::VkQueryResultFlags;
using vk::VkQueryType;
using vk::VkQueryType            ;
using vk::VkQueue;
using vk::VkQueue*;
using vk::VkQueueFamilyProperties          ;
using vk::VkQueueFamilyProperties*;
using vk::VkQueueFamilyProperties2*;
using vk::VkQueueFlagBits;
using vk::VkQueueFlags           ;
using vk::VkQueueGlobalPriorityEXT;
using vk::VkQueueGlobalPriorityEXT       ;
using vk::VkRasterizationOrderAMD;
using vk::VkRasterizationOrderAMD          ;
using vk::VkRayTracingShaderGroupTypeNV;
using vk::VkRayTracingShaderGroupTypeNV ;
using vk::VkRect2D       ;
using vk::VkRect2D               ;
using vk::VkRect2D                         ;
using vk::VkRect2D*;
using vk::VkRefreshCycleDurationGOOGLE*;
using vk::VkRenderPass;
using vk::VkRenderPass    ;
using vk::VkRenderPass           ;
using vk::VkRenderPass*;
using vk::VkRenderPassCreateFlagBits;
using vk::VkRenderPassCreateFlags ;
using vk::VkRenderPassCreateFlags    ;
using vk::VkResolveModeFlagBitsKHR;
using vk::VkResolveModeFlagBitsKHR                                 ;
using vk::VkResolveModeFlagsKHR                ;
using vk::VkResult;
using vk::VkResult* ;
using vk::VkSampleCountFlagBits;
using vk::VkSampleCountFlagBits  ;
using vk::VkSampleCountFlagBits      ;
using vk::VkSampleCountFlagBits            ;
using vk::VkSampleCountFlagBits                        ;
using vk::VkSampleCountFlags     ;
using vk::VkSampleCountFlags         ;
using vk::VkSampleCountFlags               ;
using vk::VkSampleLocationsInfoEXT         ;
using vk::VkSampleMask;
using vk::VkSampler;
using vk::VkSampler       ;
using vk::VkSampler           ;
using vk::VkSampler*;
using vk::VkSamplerAddressMode;
using vk::VkSamplerAddressMode   ;
using vk::VkSamplerCreateFlagBits;
using vk::VkSamplerCreateFlags   ;
using vk::VkSamplerMipmapMode;
using vk::VkSamplerMipmapMode    ;
using vk::VkSamplerReductionModeEXT;
using vk::VkSamplerReductionModeEXT ;
using vk::VkSamplerYcbcrConversion;
using vk::VkSamplerYcbcrConversion      ;
using vk::VkSamplerYcbcrConversion*;
using vk::VkSamplerYcbcrConversionKHR;
using vk::VkSamplerYcbcrModelConversion;
using vk::VkSamplerYcbcrModelConversion;
using vk::VkSamplerYcbcrModelConversion ;
using vk::VkSamplerYcbcrModelConversion      ;
using vk::VkSamplerYcbcrModelConversionKHR;
using vk::VkSamplerYcbcrRange;
using vk::VkSamplerYcbcrRange;
using vk::VkSamplerYcbcrRange           ;
using vk::VkSamplerYcbcrRange                ;
using vk::VkSamplerYcbcrRangeKHR;
using vk::VkScopeNV;
using vk::VkScopeNV                           ;
using vk::VkSemaphore;
using vk::VkSemaphore ;
using vk::VkSemaphore    ;
using vk::VkSemaphore                      ;
using vk::VkSemaphore*;
using vk::VkSemaphoreCreateFlags ;
using vk::VkSemaphoreImportFlagBits;
using vk::VkSemaphoreImportFlagBitsKHR;
using vk::VkSemaphoreImportFlags ;
using vk::VkShaderFloatControlsIndependenceKHR;
using vk::VkShaderFloatControlsIndependenceKHR ;
using vk::VkShaderInfoTypeAMD;
using vk::VkShaderModule;
using vk::VkShaderModule         ;
using vk::VkShaderModule*;
using vk::VkShaderModuleCreateFlagBits;
using vk::VkShaderModuleCreateFlags ;
using vk::VkShaderResourceUsageAMD ;
using vk::VkShaderStageFlagBits;
using vk::VkShaderStageFlagBits  ;
using vk::VkShaderStageFlags;
using vk::VkShaderStageFlags ;
using vk::VkShaderStageFlags     ;
using vk::VkShaderStageFlags           ;
using vk::VkShaderStageFlags            ;
using vk::VkShaderStageFlags             ;
using vk::VkShaderStageFlags                  ;
using vk::VkShadingRatePaletteEntryNV;
using vk::VkShadingRatePaletteEntryNV         ;
using vk::VkSharingMode;
using vk::VkSharingMode ;
using vk::VkSharingMode          ;
using vk::VkSharingMode                    ;
using vk::VkSparseImageFormatFlagBits;
using vk::VkSparseImageFormatFlags ;
using vk::VkSparseImageFormatProperties ;
using vk::VkSparseImageFormatProperties    ;
using vk::VkSparseImageFormatProperties*;
using vk::VkSparseImageFormatProperties2*;
using vk::VkSparseImageMemoryRequirements                                      ;
using vk::VkSparseImageMemoryRequirements*;
using vk::VkSparseImageMemoryRequirements2*;
using vk::VkSparseMemoryBindFlagBits;
using vk::VkSparseMemoryBindFlags;
using vk::VkStencilFaceFlagBits;
using vk::VkStencilFaceFlags;
using vk::VkStencilOp;
using vk::VkStencilOp            ;
using vk::VkStencilOpState       ;
using vk::VkStreamDescriptorSurfaceCreateFlagsGGP ;
using vk::VkStructureType;
using vk::VkStructureType ;
using vk::VkStructureType  ;
using vk::VkStructureType        ;
using vk::VkStructureType                  ;
using vk::VkSubgroupFeatureFlagBits;
using vk::VkSubgroupFeatureFlags        ;
using vk::VkSubpassContents;
using vk::VkSubpassContents      ;
using vk::VkSubpassDescriptionFlagBits;
using vk::VkSubpassDescriptionFlags ;
using vk::VkSubpassDescriptionFlags                   ;
using vk::VkSubresourceLayout*;
using vk::VkSurfaceCapabilities2EXT*;
using vk::VkSurfaceCapabilities2KHR*;
using vk::VkSurfaceCapabilitiesKHR ;
using vk::VkSurfaceCapabilitiesKHR*;
using vk::VkSurfaceCounterFlagBitsEXT;
using vk::VkSurfaceCounterFlagsEXT ;
using vk::VkSurfaceCounterFlagsEXT         ;
using vk::VkSurfaceFormat2KHR*;
using vk::VkSurfaceFormatKHR ;
using vk::VkSurfaceFormatKHR*;
using vk::VkSurfaceKHR;
using vk::VkSurfaceKHR ;
using vk::VkSurfaceKHR                     ;
using vk::VkSurfaceKHR*;
using vk::VkSurfaceTransformFlagBitsKHR;
using vk::VkSurfaceTransformFlagBitsKHR    ;
using vk::VkSurfaceTransformFlagsKHR       ;
using vk::VkSwapchainCreateFlagBitsKHR;
using vk::VkSwapchainCreateFlagsKHR        ;
using vk::VkSwapchainImageUsageFlagBitsANDROID;
using vk::VkSwapchainImageUsageFlagsANDROID;
using vk::VkSwapchainImageUsageFlagsANDROID ;
using vk::VkSwapchainKHR;
using vk::VkSwapchainKHR ;
using vk::VkSwapchainKHR   ;
using vk::VkSwapchainKHR*;
using vk::VkSystemAllocationScope;
using vk::VkTessellationDomainOrigin;
using vk::VkTessellationDomainOrigin;
using vk::VkTessellationDomainOrigin    ;
using vk::VkTessellationDomainOriginKHR;
using vk::VkTimeDomainEXT;
using vk::VkTimeDomainEXT        ;
using vk::VkTimeDomainEXT*;
using vk::VkValidationCacheCreateFlagsEXT    ;
using vk::VkValidationCacheEXT;
using vk::VkValidationCacheEXT    ;
using vk::VkValidationCacheEXT*;
using vk::VkValidationCacheHeaderVersionEXT;
using vk::VkValidationCheckEXT;
using vk::VkValidationFeatureDisableEXT;
using vk::VkValidationFeatureEnableEXT;
using vk::VkVendorId;
using vk::VkVertexInputRate;
using vk::VkVertexInputRate      ;
using vk::VkViewportCoordinateSwizzleNV;
using vk::VkViewportCoordinateSwizzleNV          ;
using vk::VkViSurfaceCreateFlagsNN   ;
using vk::VkWaylandSurfaceCreateFlagsKHR   ;
using vk::VkWin32SurfaceCreateFlagsKHR   ;
using vk::VkXcbSurfaceCreateFlagsKHR   ;
using vk::VkXlibSurfaceCreateFlagsKHR   ;
using vk::VkXYColorEXT   ;
using vk::void;
using vk::void*;
using vk::void* ;
using vk::void*   ;
using vk::void*    ;
using vk::void*      ;
using vk::void*        ;
using vk::void*          ;
using vk::void*           ;
using vk::void*            ;
using vk::void*             ;
using vk::void*                  ;
using vk::void*                   ;
using vk::void*                      ;
using vk::void*                          ;
using vk::void*                            ;
using vk::void*                              ;
using vk::void*                               ;
using vk::void*                                ;
using vk::void*                                    ;
using vk::void*                                       ;
using vk::void**;
using vk::Window;
using vk::Window                           ;
using vk::wl_display;
using vk::wl_surface;
using vk::xcb_connection_t;
using vk::xcb_connection_t*;
using vk::xcb_connection_t*                ;
using vk::xcb_visualid_t;
using vk::xcb_window_t;
using vk::xcb_window_t                     ;
using vk::zx_handle_t;
using vk::zx_handle_t                      ;


} // namespace vk11